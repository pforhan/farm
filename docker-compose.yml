version: '3.8'

services:
  # Kotlin Ktor Application Service
  app:
    build:
      context: . # Build from the current project root (where Dockerfile is located)
      dockerfile: Dockerfile # Refers to the Dockerfile at the root
      args:
        # Pass the build target to Dockerfile for Gradle build (e.g., prod vs dev)
        # For now, we'll build the JAR in the Dockerfile
        GRADLE_TASK: "backend:installDist" # Build and install the backend distribution
    container_name: farm_ktor_app
    restart: unless-stopped
    ports:
      # Map host port (from .env) to container port 8080 (Ktor's default)
      - "${APP_PORT:-6118}:8080"
    volumes:
      # Mount relevant directories for logs, uploads, previews
      - ./public/uploads:/app/public/uploads # Consistent with Ktor's file handling
      - ./public/previews:/app/public/previews # Consistent with Ktor's file handling
      - ./var/logs:/app/var/logs # Logs for Ktor app
      - ./var/cache:/app/var/cache # Cache directory
    env_file:
      - ./.env # Load database credentials and other env vars
    networks:
      - farm_network

  # MySQL Database Service
  db:
    image: mysql:8.0
    container_name: farm_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
      - ./docs/database.sql:/docker-entrypoint-initdb.d/database.sql:ro # Initial schema
    ports:
      - "3306:3306" # Optional: For direct access to DB
    networks:
      - farm_network

networks:
  farm_network:
    driver: bridge

volumes:
  db_data: # Persist MySQL data